// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: key_pair.sql

package db

import (
	"context"
)

const getKeys = `-- name: GetKeys :one
SELECT uuid, privet_key, public_key, expired_at, created_at, modified_at
FROM key_pair LIMIT 1
`

func (q *Queries) GetKeys(ctx context.Context) (KeyPair, error) {
	row := q.db.QueryRowContext(ctx, getKeys)
	var i KeyPair
	err := row.Scan(
		&i.Uuid,
		&i.PrivetKey,
		&i.PublicKey,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateKeys = `-- name: UpdateKeys :one
UPDATE key_pair
SET privet_key  = COALESCE($1, privet_key),
    public_key  = COALESCE($2, public_key),
    expired_at  = (now() + interval '60 minutes'),
    modified_at =now() RETURNING uuid, privet_key, public_key, expired_at, created_at, modified_at
`

type UpdateKeysParams struct {
	PrivetKey []byte `json:"privet_key"`
	PublicKey []byte `json:"public_key"`
}

func (q *Queries) UpdateKeys(ctx context.Context, arg UpdateKeysParams) (KeyPair, error) {
	row := q.db.QueryRowContext(ctx, updateKeys, arg.PrivetKey, arg.PublicKey)
	var i KeyPair
	err := row.Scan(
		&i.Uuid,
		&i.PrivetKey,
		&i.PublicKey,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
