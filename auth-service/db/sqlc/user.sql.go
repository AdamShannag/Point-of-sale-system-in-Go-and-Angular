// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (uuid,
                   username,
                   email,
                   phone,
                   hashed_password,
                   address,
                   user_type,
                   added_by,
                   created_at,
                   modified_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING uuid, username, email, phone, hashed_password, address, user_type, added_by, created_at, modified_at
`

type CreateUserParams struct {
	Uuid           string         `json:"uuid"`
	Username       string         `json:"username"`
	Email          string         `json:"email"`
	Phone          string         `json:"phone"`
	HashedPassword string         `json:"hashed_password"`
	Address        string         `json:"address"`
	UserType       string         `json:"user_type"`
	AddedBy        sql.NullString `json:"added_by"`
	CreatedAt      time.Time      `json:"created_at"`
	ModifiedAt     time.Time      `json:"modified_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.Address,
		arg.UserType,
		arg.AddedBy,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Address,
		&i.UserType,
		&i.AddedBy,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, username, email, phone, hashed_password, address, user_type, added_by, created_at, modified_at
FROM users
WHERE uuid = $1
   or username = $1
   or email = $1
   or phone = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uuid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Address,
		&i.UserType,
		&i.AddedBy,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUsername = `-- name: GetUsername :one
SELECT username
FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUsername(ctx context.Context, uuid string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsername, uuid)
	var username string
	err := row.Scan(&username)
	return username, err
}

const updatePassword = `-- name: UpdatePassword :execrows
UPDATE users
SET hashed_password = $1,
    modified_at     = $2::timestamptz
WHERE username = $3
`

type UpdatePasswordParams struct {
	HashedPassword string    `json:"hashed_password"`
	ModifiedAt     time.Time `json:"modified_at"`
	Username       string    `json:"username"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updatePassword, arg.HashedPassword, arg.ModifiedAt, arg.Username)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET hashed_password   = COALESCE($1, hashed_password),
    username          = COALESCE($2, username),
    email             = COALESCE($3, email),
    phone             = COALESCE($4, phone),
    address           = COALESCE($5, address),
    user_type         = COALESCE($6, user_type),
    modified_at     = $7::timestamptz,
    created_at      = created_at
WHERE uuid = $8
RETURNING uuid, username, email, phone, hashed_password, address, user_type, added_by, created_at, modified_at
`

type UpdateUserParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	Username       sql.NullString `json:"username"`
	Email          sql.NullString `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Address        sql.NullString `json:"address"`
	UserType       sql.NullString `json:"user_type"`
	ModifiedAt     time.Time      `json:"modified_at"`
	Uuid           string         `json:"uuid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.UserType,
		arg.ModifiedAt,
		arg.Uuid,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Address,
		&i.UserType,
		&i.AddedBy,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
